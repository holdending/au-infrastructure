# This workflow will build and push a new container image to Alibaba Cloud Container Registry (ACR),
# and then will deploy it to Alibaba Cloud Container Service for Kubernetes (ACK), when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ACR repository to store your container images.
#    You can use ACR EE instance for more security and better performance.
#    For instructions see https://www.alibabacloud.com/help/doc-detail/142168.htm
#
# 2. Create an ACK cluster to run your containerized application.
#    You can use ACK Pro cluster for more security and better performance.
#    For instructions see https://www.alibabacloud.com/help/doc-detail/95108.htm
#
# 3. Store your AccessKey pair in GitHub Actions secrets named `ACCESS_KEY_ID` and `ACCESS_KEY_SECRET`.
#    For instructions on setting up secrets see: https://developer.github.com/actions/managing-workflows/storing-secrets/
#
# 4. Change the values for the REGION_ID, REGISTRY, NAMESPACE, IMAGE, ACK_CLUSTER_ID, and ACK_DEPLOYMENT_NAME.
#

name: Build and Deploy to ACK

on:
  push:
    branches: [ "main" ]

# Environment variables available to all jobs and steps in this workflow.
env:
  REGION_ID: cn-shanghai
  REGISTRY: registry.cn-shanghai.aliyuncs.com
  NAMESPACE: liveramp
  IMAGE: ae-copilot
  TAG: ${{ github.sha }}
  # TAG: ${{ steps.git-version.outputs.TAG }}
  # TAG: ${{ runner.command 'git describe --tags --abbrev=0' }}
  # TAG: ${{ $(git describe --tags --abbrev=0) }}
 

# permissions:
#   contents: read
permissions :
  actions: write
  checks: write
  contents: write
  deployments: write
  id-token: write
  issues: write
  discussions: write
  packages: write
  pages: write
  pull-requests: write
  repository-projects: write
  security-events: write
  statuses: write


jobs:
  build:
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        repository: holdending/ae-copilot
        ref: main

    # - name: Get Git Version
    #   id: git-version
    #   run: |
    #     echo "TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV

    # 1.1 Login to ACR
    - name: Login to ACR with the AccessKey pair
      uses: aliyun/acr-login@v1
      with:
        region-id: "${{ env.REGION_ID }}"
        access-key-id: "${{ secrets.ACCESS_KEY_ID }}"
        access-key-secret: "${{ secrets.ACCESS_KEY_SECRET }}"

    # # 1.2 Buid and push image to ACR
    # - name: Build and push image to ACR
    #   # env:
    #   #   IMAGE_TAG: ${{ github.sha }}
    #   run: |-
    #     GOOS=linux GOARCH=amd64 go build -tags='$(BUILD_TAGS)' -o ./bin/ae-copilot  ./cmd
    #     docker build -f ./cmd/Dockerfile.local -t "$REGISTRY/$NAMESPACE/$IMAGE:$TAG" .
    #     docker push "$REGISTRY/$NAMESPACE/$IMAGE:$TAG"

    - name: Checkout
      uses: actions/checkout@v3
      with:
        repository: holdending/cloud-deployment
        ref: main

    - name: Update values.yaml
      env:
        GITHUB_TOKEN: ${{ github.token }}
        repo-token: ${{ github.token }}
      run: |-
        echo "GITHUB_TOKEN: $GITHUB_TOKEN"
        sed -i "s/APP_VERSION:.*/APP_VERSION: '${{ github.sha }}'/" envs/values.yaml
        git config --global user.name 'holden.ding'
        git config --global user.email 'holden.ding@liveramp.com'
        git add envs/values.yaml
        git commit -m "Update values.yaml"
        git push
